#!/usr/bin/env ruby
require 'yaml'
require 'multi_json'
require 'nokogiri'
require 'mechanize'
require 'logger'
require 'trollop'

#TODO - allow you to configure what gets excluded from uploading
#TODO - add support for pulling down a plunk to keep the local file in sync
opts = Trollop::options do
  opt :plunk_txt, "Output a plunk.txt with url"
end

VALID_EXTENSTIONS = [".js", ".html"]
if !File.exists?(File.expand_path("~/.plunk_it"))
  abort("You must created a ~/.plunk_it with your GitHubToken")
else
  GITHUB_TOKEN = File.open(File.expand_path("~/.plunk_it"), "rb").read
end

target_directory = ARGV.first
abort("You must provide the name of a directory to plunk") if !target_directory
puts "Preparing to plunk #{target_directory}"

#open the manifest - which should have 
# the url
# the description
# the tags for the item
# get the authentication from a file or env?
abort "#{target_directory} is not a valid directory"  if !FileTest.directory?(target_directory)
abort("You do not have permission to read #{target_directory}") if !FileTest.readable?(target_directory)
Dir.chdir(target_directory)
manifest_filename = File.expand_path([target_directory, "manifest.yml"].join(File::SEPARATOR))
abort("You must have a manifest.yml file in directory it to be able to be plunked") if !File.exists?(manifest_filename)
puts "Unable to save the plunker id because the manifest is not writable" if !FileTest.writable?(manifest_filename)
manifest = YAML.load_file(manifest_filename)

payload = manifest.clone
payload.delete("plnkr_id")
payload["files"] = {} if !payload["files"]
#payload["description"] +=  " #{Time.now}"

#get a list of the files in the directory - exclude the manifest
puts "Bundling files:"
Dir["**/*"].select{|x| !File.directory?(x) && 
                       VALID_EXTENSTIONS.include?(File.extname(x))}.each do |file_name|
  puts "\t#{file_name}" 
  file = File.open(file_name, "rb")
  payload["files"][file_name] = { :filename => file_name,
                        :content => file.read}

end
@agent = Mechanize.new do|a|
#a.log = Logger.new('log.txt')
#   a.log.level = Logger::DEBUG
#   a.user_agent_alias = "Windows IE 6"
end
plnkr_session_page = @agent.get("http://api.plnkr.co/session")
plnkr_session =  MultiJson.load(plnkr_session_page.body)
login_post = @agent.post(plnkr_session["user_url"], MultiJson.dump({"service" => "github",
                                        "token" => GITHUB_TOKEN}),
                    {"Content-type" => "application/json;charset=UTF-8",
                     "Origin" => "http://www.plnkr.co",
                     "Referer" => "http://www.plnkr.co/"})

#figure out if they have plunked it before
if manifest["plnkr_id"]
  post_url = "http://api.plnkr.co/plunks/#{manifest["plnkr_id"]}?sessid=#{plnkr_session["id"]}"
#payload.delete("tags") #Tags have to be handled in a seperate request
  referer = "http://plnkr.co/edit/#{manifest["plnkr_id"]}"
  current_data_page = @agent.get(post_url)
  current_data = MultiJson.load(current_data_page.body)
  payload.delete("description") if current_data["description"] == payload["description"]
  payload.delete("private") if current_data["private"] == payload["private"]
  payload.delete("tags")
  new_tags = {}
  manifest["tags"].each do |tag|
    if !current_data["tags"].include?(tag)
      new_tags[tag] = true
    end
  end
  current_data["tags"].each do |tag|
    if !manifest["tags"].include?(tag)
      new_tags[tag] = nil
    end
  end
  payload["tags"] = new_tags if !new_tags.empty?

  new_files = {}
  payload["files"].each do |file, value|
    if !current_data["files"].has_key?(file)
      puts "New file found #{file}"
      new_files[file] = value
    else
      if current_data["files"][file]["content"] != value[:content]
        puts "File modified #{file}"
#       puts "Server:"
#       pp current_data["files"][file]["content"]
#       puts "Local:"
#       pp value[:content]
        new_files[file] = { "content" => value[:content]}
      else
        puts "Ignoring #{file}"
      end
    end

  end
  current_data["files"].each do |file,value|
    if !payload["files"].has_key?(file)
      puts "Removing File #{file}"
      new_files[file] = nil
    end
  end

  # figure out i fthere are files that have chnaged
  if new_files.empty?
    payload.delete("files")
  else
    payload["files"] = new_files
  end

# pp MultiJson.dump(payload)
#  abort("oops")
else
  post_url = "http://api.plnkr.co/plunks?sessid=#{plnkr_session["id"]}"
  referer = "http://plnkr.co/edit/"
  current_data_page = @agent.get(post_url)
end

if !payload.empty?
  plunk_post = @agent.post(post_url, MultiJson.dump(payload),
                      {"Content-type" => "application/json;charset=UTF-8",
                        "Host" => "api.plnkr.co",
                        "Origin" => "http://plnkr.co",
                        "Referer" => referer })

                           
  plunk_data =  MultiJson.load(plunk_post.body)
  manifest["plnkr_id"]  = plunk_data["id"]
  File.open(manifest_filename, "wb") do |f|
    f.write(YAML.dump(manifest))
  end
  plunk_url = "http://plnkr.co/edit/#{plunk_data["id"]}"
  if opts[:plunk_txt]
    plunk_txt_filename = File.expand_path([target_directory, "plunk.txt"].join(File::SEPARATOR))
    File.open(plunk_txt_filename, "wb") do |f|
      f.write(plunk_url)
    end
    puts "Wrote #{plunk_txt_filename}"
  end
  puts "It has been plunked to #{plunk_url}"
else
  puts "No change to plunk"
end
